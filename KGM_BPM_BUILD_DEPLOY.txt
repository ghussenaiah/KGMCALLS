
BUILD CODE Subject 1
DEPLOY CODE Subject 2

Business Process Controller Subject 3
VerbController              Subject 4 


Studio Configuration     Subject 5 






Runtime Code Each Service
===============================================================================================================================

Notes : In bpm request receiving as string and we are sending every response as string  

==========================   Process Controoler  ======================

BusinessProcessContoller class 1
                         
						 process()  method 1 
						 
                         
                         processRequest() method  2


BusinessProcessExecutor  class 2
						 
						 executeProcess()  method 3 
						 executeProcess2() method 4 



                         Here view step loadui call will be coneverted to onload call( In java itself ) if the output context contains UiResource
                          
						 
TreeProcessController    class 3 

                         executeProcess()  method 5 
						 
TreeProcessControllerStateManager2  class 4 

                         executeProcess()  method 6 
						 onProcessRunning() method 7 
						 
TreeProcessStateActionHandler    class 5 

                         onRun()   method 8 		


TreeProcessExecutor       class 6 

                         executeProcess()  method 9 		
						 


==========================   Process Controoler  ===========================

=========================  Verb controller =================================

VerbController3    class 1    
                          
						  executeVerb() method 1 
						  
						  
						  executeVerb2()   method 2 
						  
						  
						  from this method each state of the verb will be execute (  IDLE,CREATED_WAIT,LOADUI,WAIT,VALIDATED_WAIT,VALIDATED,-> onVerbRun,RUN_WAIT)
  						  
						  
						  



=========================  Verb controller =================================
						 


						 
========================== BUILD CODE Subject 1===============================================



ProjectController  Class 1  
					       generateBuild() method 1 
BuildServiceImpl   Class 2 
                           generateBuild() method 2   

						   from modules submodule will be collected to list 

						   dashboard data will be fetched using       =>>>>>>>>>>>>> dashboard_1

						   system module will loaded separately default 

						   all master process  will be  loaded separately by using  !dashBoard.isBuildMaster()


					PanelType.LEFTPANEL
					PanelType.ANNOUNCEMENT
				    PanelType.ALERT               

					from all these panels processname  will be collected Set<String> which are having build as true process 


					Now iterating all the processNames and  scanning the each process 

					while iterating  ( all will be collcted to Set<ProcessContractDTO> ) 


					log.info("Started scaning process" + processName);

					log.info(String.format("Finding complete process lifecycle for process %s", processName));

				    it will try to load the process using processName from mongodb if not found then 

					String err = String.format("couldn't find process %s", processName);

				    if process type is (process.getBusinessProcess().getType())  TRIGGERED  then it will load the parent process for triigerd process 

					if not found then String err = String.format("couldn't find parent-process for %s", processName);


                    loop 

                    if process contains the trigger process then it will iterate the each trigger process and it wll check whether exit is mongodb or not 

					if not found then String err = String.format("couldn't find trigger-process for %s", triggerProcessId);

					    toReturn.add(triggerProcess);
						visitedProcessNames.add(triggerProcess.getProcessName());

                 
				     Now iterating over each step of the process 

					 --- foreach invoke link 

                     step.getConstructType() instanceof ForEach
					 step.getConstructType() instanceof Link

					  log.info(String.format("Finding complete process lifecycle for link process  %s",link.getNextProcess()));

					 step.getConstructType() instanceof Invoke 

					 log.info(String.format("Finding complete process lifecycle for invoke process  %s",invoke.getProcessToExecute()));

					 step.getConstructType() instanceof Verb

					 verbname can be "group" and "CREATE"

                          if (verb.getNeedsUIbool() != null && verb.getNeedsUIbool())   then it will try to collect proceeName from 

						  presentation rules adding partiipating process 
				     
					 ===========>  	log.info("listening presentation with ID:-" + id);  


					 from precondition and postconditon policies also we are collecting getParticipatingProcess process 



					 Set<ProcessContractDTO> triggeredProcesses = triggerService.getAllTriggredProcesses();  (schedules process )

					 process also will be collected 

					 ModuleDTO globalModule = moduleService.findOneById(ProcessConstants.GLOBAL_PROCESSES); global process also will be colleced  


					 above all process will be collected to Set<BusinessProcess> requiredProcesses;


                       
                     BuildServiceImpl class ->    Now generateBuild method will be called with all above process 


					 Tas file will be configured 

					 ContractHolder contractHolder = new ContractHolder(); it contains following things 


						private Map<String, EntityMetaData> entityContext;
						private Map<String, KPolicy> policyContext;
						private Map<String, KPolicyTag> kpolicyContext;
						private Map<String, Trigger> triggerContext;
						private Map<String, PresentationRule> presentationContext;
						private Map<String, DynamicForm> dynamicFormContext;
						private Map<String, BusinessProcess> businessProcessContexts;
						private Organization orgContext;
						private Dashboard dashboardContext;
						private Map<String, MasterData> entityMasterDataContext;
						// not used at runtime
					//	private Map<String, PresentationRule> masterDataPresentationContext;
						private Map<String, EntityUpdates> entityUpdatesContext;
						private Map<String, ProjectVersion> projectVersionContext;
						private Map<String, DocumentTemplateDTO> documentTemplateContext;
						private Map<String, KconfigurationTemplate> kapiTemplateContext;
						private TargetApplicationSetting targetAppSettingContext;
						private Map<String, KRawReport> reportContext;
						private Map<String, ProjectStructure> projectStrucutureContext;
						private Map<String, FolderStructure> folderStrucutureContext;
						private Map<String, Kagorithm> kagorithmContext;
						private Map<String, TranslationDBO> translationContext;
						private Map<String, StaticTranslationDBO> staticTranslationContext;
						private Map<String, KStoredProcedure> storedProcedureContext;
						@Transient
						@JsonIgnore
						private List<ConstraintViolation> constraintViolations;

						contractHolder.setTargetAppSettingContext(tas);   // tas file will be added contractHolder


						generateContract method will be called 


						contractHolder.setOrgContext(organizationContext);  // roles hierarchy will be added contractHolder


					(1)	listenAtProjectLevel(projectDto, contractHolder); method will be called 
                    (2) listenersAtBusinessProcessLevel

					(1)	dashboardListener.listen(projectDto, contractHolder);
						entityMasterDataListener.listen(projectDto, contractHolder);
						entityListener.listen(projectDto, contractHolder);
						reportListener.listen(projectDto, contractHolder);
						entityUpdatesListener.listen(projectDto, contractHolder);
						projectStructureListener.listen(projectDto, contractHolder);
						ktapolicyListener.listen(projectDto, contractHolder);
						folderStructureListener.listen(projectDto, contractHolder);
						//kagorithmListener.listen(projectDto, contractHolder);
						translationListener.listen(contractHolder);
						staticTranslationListener.listen(contractHolder);


			==> dashboardListener.listen(projectDto, contractHolder);

						 	Dashboard dashboard = dashboardService.fetch();
						 	contractHolder.setDashboardContext(dashboard);

						  log.info("dashboard assembled:-".concat(dashboard.toString()));

            ==> entityMasterDataListener.listen(projectDto, contractHolder);


						 List<MasterData> allMasterData = getMasterEntityService().fetchAllMasterDataByContainerId(
					     v.getId());

						 from entityMasterData (mongodb collection name ) it will place records in contractHolder

			==> entityListener.listen(projectDto, contractHolder);

						List<EntityMetaData> entityMetaDataList = entityService.fetchEntities();

						collecting the kago for sequence no of entity attributes 

						contractHolder.putInKagorithmContext(kago);

						contractHolder.putInKConfigurationTemplateDataContext(kConfiguration);   // every kapi which is mapped to entityt will be saveed to putInKConfigurationTemplateDataContext

						contractHolder.putInEntityContext(dataDTO);  // every entity is placed here //  putInEntityContext



			==>  reportListener.listen(projectDto, contractHolder);

                          List<KRawReport> reportList = reportService.findByProjectId(projectDTO.getId());

						  contractHolder.setReportContext(reportMap);

			==>  entityUpdatesListener.listen(projectDto, contractHolder);

                          List<EntityUpdates> entityUpdatesList = entityUpdatesService.fetchEntityUpdates(v.getId());

                         @Document(collection = "#{@tenantProvider.getTenantId()}_entityUpdates")
						 contractHolder.putInEntityUpdatesContext(entityUpdate);


            ==>  projectStructureListener.listen(projectDto, contractHolder);

                 it will populate every process submoduel and module as object in the tree structure 


			==>  ktapolicyListener.listen(projectDto, contractHolder);


                   List<KPolicyTag>  kTagList = kPolicyTag.findByGroupId(projectDTO.getId());
			
				   contractHolder.setKpolicyContext(Kpolicytag);
		


			==>  folderStructureListener.listen(projectDto, contractHolder);
                    
					@Document(collection = "#{@tenantProvider.getTenantId()}_folder")


					all folder and subfoldeers will be collected reports and entities will be loaded 


			==>  //kagorithmListener.listen(projectDto, contractHolder);   // nothing will be performed 


			==>  translationListener.listen(contractHolder);

						Map<String, TranslationDBO> translationMap = contractHolder.getTranslationContext();
					List<TranslationDBO> translationDBOList = translationservice.fetch();

					if (!translationDBOList.isEmpty()) {
						try {
							for (TranslationDBO translationDBO : translationDBOList) {
								log.info("trasnaltion dbo"+translationDBO.getTranslationDataMap());
								translationMap.put(translationDBO.getTranslationId(), translationDBO);
							}
						} catch (Exception e) {
							log.error("error while getting translation data from mongodb" + e.getMessage());
						}
					}



			==>  staticTranslationListener.listen(contractHolder

						Map<String, StaticTranslationDBO> translationMap = contractHolder.getStaticTranslationContext();
					if (!translationservice.fetchStaticTranslationDBO().isEmpty()) {
						try {
							List<StaticTranslationDBO> staticTranslationDBOList=translationservice.fetchStaticTranslationDBO();
							for (StaticTranslationDBO staticTranslationDBO : staticTranslationDBOList) {
								translationMap.put(staticTranslationDBO.getStaticTranslationId(), staticTranslationDBO);
							}
						}
						catch (Exception e) {
							log.error("error while getting translation data from mongodb" ,e);
						}
						
					}


                 (2) listenersAtBusinessProcessLevel
              
             Next List<ConstraintViolation> constraintViolations = listenersAtBusinessProcessLevel(businessProcesses,
					contractHolder, projectDto);  will be called 


				subProcessGetterListenerDup.listen(businessProcesses, contractHolder);
				triggerProcessListener2.listenToModifyStep(businessProcesses, contractHolder);
				CopyOnWriteArrayList<BusinessProcess> businessProcesss = new CopyOnWriteArrayList<>(businessProcesses);
				presentationRuleListener.listen(businessProcesss, contractHolder);
				policyListener.listen(businessProcesss, contractHolder);
				kagorithmStepListener.listen(businessProcesses, contractHolder);


==================================== subProcessGetterListenerDup.listen(businessProcesses, contractHolder); =============================================


				it will iterate over each processs 

				and next it wil iterate over each step of the process if 	if(businessProcess.getListOfSteps() == null)

				then it will throw below error 

				"Sub Process","No steps found in process :"


				while iterating over each step 

				if (step.getConstructType() instanceof BusinessConstruct)

				List<BusinessConstruct.Properties> properties = BusinessConstruct.getProperties(); 

				Here it collect all subprocess and it will check whether each subprocess is present in db or not 

				log.error(subProcessEvent.getProcessId().concat(" process is not in DB"));



				triggerProcessListener2.listenToModifyStep(businessProcesses, contractHolder);
				

===============================presentationRuleListener.listen(businessProcesss, contractHolder);==============================================================

				PresentationRuleListener class ----- > listen method()

                    iterating over each business process 

					log.info("listening presentation in process {}", businessProcess.getProcessIdForProcess());

					 iterating over each step of the  business process 

					 if (step.getConstructType() instanceof Verb) 
					 if (step.getConstructType() instanceof UiInput)
					 if (step.getConstructType() instanceof SwitchToNext)



					log.info("listening presentation in step "+step.getName());

					log.info("listening presentation with ID:-" + id);   it could direct rule means prule_345 or prule_group_1640 group id 

					if it contains group id it will load all presentation rules of the group and it will itrate over here 

					it will try to check each prule present in global context if not found then it will try to throw below error 

					log.error("prule not found from globalContext =======>>>>>>>>>>>>>>>"+id);

					log.error("presention Not Found not Found for:-" + step.getName()
							+ "kindly verify the number of embedded enities are same as templates in form");

								uiValidationService.addValidationToPresentationRule(dto, entityMetaData);

								by using above step it will to add all validations from entity to presentations rule 

								it will check attribute not null and relations not null values it will update presentation rules 

								KPolicy kPolicy = aggregateBusinessValidationPolicySaveAndPopulateInStep(step, entityMetaData,dto);

								it will try to check any business validatation for the step and it will plave the rule kpolicy context 



								it will check FieldPresentation FormPresentation NonFieldPresentation  presentation rule of each presentationRule 

								it presentationRule contains above things it will call recursively 

					at finally it will place in presentationContext

					presentationContext.put(dto.getPresentationId(),dto);	


			contractHolder.putAllPresentationCOntext(presentationContext);
			contractHolder.putAllPolicyContext(kPolicyContext);	

			log.info("beginning to load dynamic form to contract holder ... {}", tenantProvider.getTenantId());

			it will itrate over each prule from presentationContext it wll try to load dynamic form data 

			and it will also find all kago from dymaic form data it will place data in following containers
			
			contractHolder.putInKagorithmContext(kago);

			contractHolder.putInDynamicFormContext(dynamicForm);

			log.info("finished loading dynamic form to contract holder ... {}", tenantProvider.getTenantId());

=================================== policyListener.listen(businessProcesss, contractHolder);     ========================================================



                      it will iterate over each business process 

					  and it will iterate over each step of the business process 

			 for (Step step : businessProcess.getListOfSteps())
					    
						if (step.getConstructType() instanceof BusinessConstruct) {
						BusinessConstruct businessConstruct = (BusinessConstruct) step.getConstructType();
						
						if (CollectionUtils.isNotEmpty(businessConstruct.getProperties())) {
						}


						it will compare each propery with 
						BUSINESS_RULES or 
						PRE_CONDITION or 
						POST_CONDITION or 
						COMPUTE 
						UPDATE
						DSFETCH
						RESTRICTION
						EXCELMAPPING 
						DSFETCH
						RESTRICTION
					}

					if (businessConstruct instanceof SwitchToNext) {}
					if (businessConstruct instanceof ForEach) {}
					if (businessConstruct instanceof Verb) {}

					from each of the above steps it will collect all the pllicies and it will place in 

					List<KPolicy> policies = new CopyOnWriteArrayList<>();


					it will iterate over each policy of policies

					it wil collect all the kagorithms from the policies it will place all kagorithms in contractHolder

					contractHolder.putInKagorithmContext(kago);




ContractContainer contains the following object types 

public void initialize() {
		interContractContainer.put(ContractConstants.PROCESS, new ProcessHolder());
		interContractContainer.put(ContractConstants.ENTITY, new EntityHolder());
		interContractContainer.put(ContractConstants.PRESENTATION, new PresentationHolder());
//		interContractContainer.put(ContractConstants.DYNAMIC_FORM, new DynamicFormHolder());
		interContractContainer.put(ContractConstants.POLICY, new PolicyHolder());
		interContractContainer.put(ContractConstants.TAGNAMES, new KTagPolicyHolder());
		interContractContainer.put(ContractConstants.ORGANIZATION, new OrganizationHolder());
		interContractContainer.put(ContractConstants.DASHBOARD, new DashboardHolder());
		interContractContainer.put(ContractConstants.TRIGGER, new TriggerHolder());
		interContractContainer.put(ContractConstants.MASTER_DATA, new MasterDataHolder());

		// not used in runtime
//		interContractContainer.put(ContractConstants.MASTER_PRESENTATION, new MasterPresentationHolder());
		interContractContainer.put(ContractConstants.ENTITY_MIGRATION, new EntityMigrationHolder());
		interContractContainer.put(ContractConstants.PROJECT_VERSION, new ProjectVersionHolder());
		interContractContainer.put(ContractConstants.TARGET_APP_SETTING, new TargetApplicationSettingHolder());
		interContractContainer.put(ContractConstants.DOC_TEMPLATE, new DocumentTemplateDataHolder());
		interContractContainer.put(ContractConstants.KCONFIGURATION_TEMPLATE, new KconfigurationTemplateHolder());
		interContractContainer.put(ContractConstants.REPORT, new ReportHolder());
		interContractContainer.put(ContractConstants.PROJECT_STRUCTURE, new ProjectStructureHolder());
		interContractContainer.put(ContractConstants.FOLDER_STRUCTURE, new FolderStructureHolder());
		interContractContainer.put(ContractConstants.KAGORITHM, new KagorithmHolder());
		interContractContainer.put(ContractConstants.TRANSLATION, new TranslationHolder());
		interContractContainer.put(ContractConstants.STATIC_TRANSLATION, new StaticTranslationHolder());
		interContractContainer.put(ContractConstants.STORED_PROCEDURE, new KStoredProcedureHolder());

	}

============================================  Application Generation code ================================================

ApplicationGenerationController.generateApplication method 

contractContainer, projectId will be input above method 

log.info("Application generation Started");

projectBuildResponseMap.put(projectId,
						getApplicationGenerationService().generateApplication(contractContainer));


log.info("Document TemplateData :- " + contractContainer.getDocumentTemplateContext());
		
			TargetApplicationSetting targetApplicationSetting = contractContainer.getTargetApplicationSettingDesign()
					.getTargetApplicationSetting();

it will extract DocumentTemplateContext and Tas File Data 

			log.info("Project name is {} and current buildnumber {} and previous build number {}", targetApplicationSetting.getAppName(),
					targetApplicationSetting.getBuildNumber(), targetApplicationSetting.getPreviousBuildNumber());
			tenantProvider.setTenantId(targetApplicationSetting.getProjectId());

if it is clean build then it will try to delete everything folders 

			if(targetApplicationSetting.isCleanBuild()) {
				File file = new File(targetApplicationSetting.getDirectorySetting().getRoot() + targetApplicationSetting.getProjectName());
				log.debug("trying to delete Restructure " + file.getAbsolutePath());
				removeRestructure(file);
			}



RESTBasedExecutor class 

executeBusinessProcessContext(contractContainer, contractHolder);

contractContainer.getProcessContext().getHolder().put(entry.getKey(),
											new ProcessDesign(transformApplyingFilter(entry.getValue(), BusinessProcess.class)));


				

				ApplicationGenerationServiceImpl class 	


                MetaData will be generated for each construct 


				getProcessController().saveProcesses(contractContainer, designContainer);

				ProcessController class -> saveProcesses method 

				ProcessServiceFrameworkImpl class 

				BusinessProcessResolver class   processBusinessProcess method  

				
				projectionContextResolver context will be handled here 

		        Map<String, BusinessProcess> businessProcessMap = contractContainer.getProcessContext().getDataContext();

					Map<String, Step> stepContainer = businessProcessHelper.populateStepContainer(steps);


				ConstructFactory  class 

				resolveConstructAndProcess

				return verbConstructResolver.processVerb(step, processName, contractContainer);


				VerbConstructResolver class 

				processVerb method 

				processVerbProperties method 


				ExcelMappingInput class 



            model class generation wil start here and it will place every pojo class in specified folder 

			Future<?> futuretask = getEntityController().createEntities(contractContainer.getEntityContext(),
							targetApplicationSetting);

							getModelGenerator().generateModel(copied, originialEntityHolder.getHolder(), tas);

							javaClass = EntityGenerator.createJavaClass(entityVO);

							JavaFileWriter.writeToFile(javaClass, tas.getDirectorySetting().getBaseDirectory(), ccategory);

							if(ccategory == ClassCategory.KAGORITHM_CLASS) {
									createKagoDirectory(baseDirectory, javaClass.getPackage());
							file = new File(getKagoClassPath(baseDirectory, javaClass.getQualifiedName()));
							} else {
									createDirectory(baseDirectory, javaClass.getPackage());
							file = new File(getClassPath(baseDirectory, javaClass.getQualifiedName()));
							}

							writer = new BufferedWriter(new FileWriter(file));
							writer.write(javaClass.toString());
							writer.flush();



		 policy drl file generation will start here 

		 Future<?> futuretask = getPolicyController().create(localContractContainer.getPolicyContext(),
						   localContractContainer.getEntityContext(), targetApplicationSetting);					


		
          stored procedure generation start here 

		final ContractContainer localContractContainer = contractContainer;

		getKagorithmController().createStoredProcedureKagorithm(localContractContainer.getEntityContext(), localContractContainer.getKagorithmContext(),
						localContractContainer.getStoredProcedureContext(), targetApplicationSetting);

			createStoredProcedureKagorithm(EntityHolder entityHolder, 
			KagorithmHolder kagorithmHolder,
			KStoredProcedureHolder storedProcedureHolder, TargetApplicationSetting tas)
			
					3=>	storedProcedureHolder.getHolder().put(kStoredProcedureDesign.getData().getId(), kStoredProcedureDesign);

						

						// here 3 line from container holder we are replacing the storeprocedues as a value by using same key in the contractcontainer 



 

 	MetaDataContainer metaDataContainer = getApplicationMetaDataService().populateContainer(contractContainer,
					designContainer);

			entityMetaDataService.populate(metaDataContainer, designContainer);
            processMetaDataService.populate(metaDataContainer, designContainer);
            organizationMetaDataService.populate(metaDataContainer, contractContainer);
            presentationMetaDataService.populate(metaDataContainer, designContainer);

		===> 	entityMetaDataService.populate(metaDataContainer, designContainer);

					private List<EntityMetaData> entityMetaData;
	        		private List<EntityDefaultValue> defaultValueMetaData;
						
						entityMetaData.addAll(entityContextHolder);
						defaultValueMetaData.addAll(entityDefaultValue);   // here two local data varibales will be loaded with data 

		===>    processMetaDataService.populate(metaDataContainer, designContainer);		



		        	getLinkMetaDataService().generateRuntimeContext(designContainer.getLinkContext(), metaDataContainer);
					getInvokeMetaDataService().generateRuntimeContext(designContainer.getNotifyContext(), metaDataContainer);
					getSwitchMetaDataService().generateRuntimeContext(designContainer.getSwitchContext(), metaDataContainer);
					getVerbMetaDataService().generateRuntimeContext(designContainer.getVerbContext(), metaDataContainer);
					forEachMetaDataService.generateRuntimeContext(designContainer.getForEachContext(), metaDataContainer);
					getUiInputContextExecutor().generateRuntimeContext(designContainer.getUiInputContext(), metaDataContainer);
					dataContextService.populatedataContext(designContainer.getDataContext(), metaDataContainer);
					getProjectionContextService().populateprojectionContext(designContainer.getProjectionContext(),metaDataContainer);
					
					getEventTreeContextService().populateContext(designContainer.getEventTreeContext(), metaDataContainer);


					all above methods will add data to "constructMetaDataContainer" 

		===> 	

	






============================================  Application Generation code ================================================

					 

					


                           
























========================== BUILD CODE ===============================================

========================== DEPLOYCODE CODE ==========================================

ProjectController  Class 1  

                            deployApp() method 1


========================== DEPLOYCODE CODE ==========================================

						 


========================= APP BOOT CODE ================================================

    there is one post construct method in class
	
	KagamiSchemaExecutor class 

    @PostConstruct
	public void execute() throws Exception {
	
		quartzSchema();
		clearQuartzTablesIfExists();
		migrateSchema();
		createViews();
		executeDefaultScript();
	    createOrAlterSchema();
		systemStoredProceduresSchema();
		
		
	}


========================= APP BOOT CODE ================================================



/busiessprocess 

1  getuserToken 
2  getWebTokenTimeout
3  updateLastAccessTime

4  converting request to BpmInputContext
5  accessLogService.markEntry
6  Executing memory calculator 

7  before execting actual we are checking dyamic event ( on cancel or on save )   if not then execting actual process 
8  In dymaic events ONSAVE ONCANCEL ONLOAD ONCHANGE we are calling the kagorithm

9 






===============================================================================================================================








Studio Code Process Save and Build and Deploy Code 
===============================================================================================================================



============================= Deploy code ====================================================================================

Note 1 while app boot time we are fetching the record from app settings and fetchg the all user details form user table  

then iterating the each user and inserting the data into usersetting table 

Note 2 






============================= Deploy code ====================================================================================
===============================================================================================================================










App Downloader Code 
===============================================================================================================================
===============================================================================================================================



Kagorithm Code  Each Step Code n Runtime Code 
===============================================================================================================================

================================ Kago Code ===================================================================================


Stored procedures will be called from three places from policy and dynamic events and compute calls 

all request will comes to StoredProcedureRuntimeServiceImpl class executeStoredProcedure method => next version3() method will called  will 

Required kagorithms will be loading from runtime mongodb 

@Document(collection = "#{@tenantProvider.getTenantId()}_kagorithm") =>>>>>>>>>>>>>>>>>>>> Collection Name will be ======>>> project_227_kagorithm

kago context will be loading from @Document(collection = "#{@tenantProvider.getTenantId()}_generated_kagorithmContextData") => project_227_generated_kagorithmContextData based kagorithmId it will be loaded 


before calling stored procedure in runtime we can see input and output values along with app user process context 

2023-01-02 11:45:30.788  INFO 3423721 --- [qtp728236551-219] .v.c.s.StoredProcedureRuntimeServiceImpl : 

Dynamic Input params -> name indentID -> value sfarm_cloud_env_684 -> type class java.lang.String -> mode IN
 
2023-01-02 11:45:30.788  INFO 3423721 --- [qtp728236551-219] .v.c.s.StoredProcedureRuntimeServiceImpl : 

Output param -> name Kagorithm_29_errorMessage -> value null -> type class java.lang.String -> mode INOUT            => here output value is null intitiall time 



List<SPRuntimeInputParam> spExecContext = getContextData(uiEvent, context, processIdentifier,
				constructContextInput, constructContextOutput, kagorithm, null, processContextWithValues,
				userContextWithValues, detailedObjects, userContextObject, policyInputParam);
				
				
		String appContext = "{}";
		String userContext = "{}";
		String processContext = "{}";
		String otherContext = "{}";
		
		
		In processContext we are sending the requried object details that will be filled in the kago exection again we are fetchng that object and assign values to runtime details object  
		
		
		ParamName  _otherContext
		ParamValue  {"processName":"process_UpdateEmpInactive_1574087","stepName":"process_UpdateEmpInactive_1574087_COMPUTE_5","machineId":"local","logginUserId":"system","level":0,"smsVendor":"AmazonService",
		"debug_log":[],"domainName":"kagami-generated_HRMS_VGS"}
		
		
		
		all above things will be prepared in the above method which is requied for stored procedures input  
		
		then we are preparing the preocedure call with input params and executing the stored procedures
		
		then result we are saving back to
		
		List<SPRuntimeOutputParam>
		
		
		for(ParameterRegistration registerParam:procedure.getRegisteredParameters()) {
						if(registerParam.getMode().equals(ParameterMode.OUT) || 
								registerParam.getMode().equals(ParameterMode.INOUT)) {
							
							//String s = (String) procedure.getOutputParameterValue(registerParam.getName());
							//Object returnParam = procedure.getOutputs().getOutputParameterValue(registerParam.getName());
							
							SPRuntimeOutputParam outParam = new SPRuntimeOutputParam();
							outParam.setParamName(registerParam.getName());
							outParam.setParamType(registerParam.getParameterType());
							outParam.setParamMode(registerParam.getMode());
							outParam.setParamValue(procedure.getOutputs().getOutputParameterValue(registerParam.getName()));
			
							outputParamList.add(outParam);
					}
		}
		
		
		then we are trying place data to runtime context from keys will be from SPRuntimeInputParam and data we are fethcing from SPRuntimeOutputParam based 
		on keys which we are checking in SPRuntimeInputParam
		
		updated object will be in _processConext that we can check in logs also 
		
		log.info(String.format("\nOutput Param %s, Value\n %s", outputParam.getParamName(), outputParam.getParamValue()));
		
		
		
				
================================ Kago Code ===================================================================================
				
				

================================ Notes ========================================================================================

all kago functions are in system_stored_procedures.sql file 


================================ Notes ========================================================================================

============================= Compute Step ========================


DECLARE currentDate DATETIME DEFAULT getCurrentDate();
DECLARE currentYear DOUBLE DEFAULT 0;


SET currentYear = getYear(currentDate);
SET currentYear = (currentYear + 1.0);

==================== Compute step =============================

==================== Calling Kago call From Another Kago =====================================================

SET param0_CreatingDefaultDeclaration = JSON_EXTRACT(_processContext,'$.Itsavings[0]');
CALL Kagorithm_386_CreatingDefaultDeclaration(_appContext, _userContext, _processContext, _otherContext,param0_CreatingDefaultDeclaration);
SET _processContext = JSON_SET(_processContext,'$.Itsavings[0]',param0_CreatingDefaultDeclaration);

==================== Calling Kago call From Another Kago =====================================================

==================== IF BLOCK CODE ===========================================================================

CALL SYS_DEBUG_MESG2(_otherContext, 1, 'Kagorithm_386_CreatingDefaultDeclaration', 'IF', "15. sec80Dcomp");

IF ((IF(NULLIF(JSON_UNQUOTE(JSON_EXTRACT(sec80Dcomp,'$')),'null') IS NOT NULL,JSON_LENGTH(sec80Dcomp,'$'),0) > 0.0)) THEN 

	CALL SYS_DEBUG_MESG2(_otherContext, 1, 'Kagorithm_386_CreatingDefaultDeclaration', 'IF', "TRUE BLOCK START OF 15. sec80Dcomp");
	CALL SYS_DEBUG_MESG2(_otherContext, 1, 'Kagorithm_386_CreatingDefaultDeclaration', 'FOREACH', "24. itrSec80D");
	SET _itr9 = 0; 
	LOOP__itr9: WHILE(_itr9 < IF(NULLIF(JSON_UNQUOTE(JSON_EXTRACT(sec80Dcomp,'$')),'null') IS NOT NULL,JSON_LENGTH(sec80Dcomp,'$'),0)) DO 
	SET itrSec80D = JSON_EXTRACT(sec80Dcomp,CONCAT('$','[',_itr9,']')); 
	CALL SYS_DEBUG_MESG2(_otherContext, 1, 'Kagorithm_386_CreatingDefaultDeclaration', 'DB_CREATE2', "25. sec80D");
	SET sec80D = NULL ;
	SET sec80D = ' {"_header":{"entityid":"SectionEightyD_616","entitytype":"EMBEDDED","audited":false,"mode":1,"updateui":0,"relationtype":"","prefix":"","mappedattribute":""},"_details":{"total":0,"maxLimit":0,"deductible":0,"narration":"","declaredAmt":0,"id":"#TEMP_ID"},"_updated":[],"_onetoone":{},"_onetomany":{},"_manytoone":{},"_manytomany":{}} ' ;
	SET sec80D = REPLACE(sec80D, "#TEMP_ID", CONCAT('temp_',getUIDShort()));
	CALL SYS_DEBUG_MESG2(_otherContext, 1, 'Kagorithm_386_CreatingDefaultDeclaration', 'COMPUTE', "26. pop sec80D from itrSec80D");
	SET sec80D = JSON_SET(sec80D,'$._details.eightyDComponentsId',NULLIF(JSON_UNQUOTE(JSON_EXTRACT(itrSec80D,'$._details.id')),'null'));
	SET sec80D = JSON_SET(sec80D,'$._manytoone.EightyDComponents._details.componentName',NULLIF(JSON_UNQUOTE(JSON_EXTRACT(itrSec80D,'$._details.componentName')),'null'));
	CALL SYS_DEBUG_MESG2(_otherContext, 1, 'Kagorithm_386_CreatingDefaultDeclaration', ' PRINT sec80D.EightyDComponents.componentName', IFNULL(NULLIF(JSON_UNQUOTE(JSON_EXTRACT(sec80D,'$._manytoone.EightyDComponents._details.componentName')),'null'),''));
SET sec80D = JSON_SET(sec80D,'$._manytoone.EightyDComponents._details.componentType',NULLIF(JSON_UNQUOTE(JSON_EXTRACT(itrSec80D,'$._details.componentType')),'null'));
SET itrSec80D = updateHeaderPrefix(itrSec80D,'$','');
SET sec80D = JSON_SET(sec80D,'$._manytoone.EightyDComponents',IFNULL(NULLIF(JSON_EXTRACT(itrSec80D,'$'),'null'),JSON_OBJECT()));
SET sec80D = JSON_SET(sec80D,'$._details.total',0.0);
SET sec80D = JSON_SET(sec80D,'$._details.maxLimit',CAST(IFNULL(NULLIF(JSON_UNQUOTE(JSON_EXTRACT(itrSec80D,'$._details.maxLimit')),'null'),0) AS DECIMAL(25,3)));
CALL SYS_DEBUG_MESG2(_otherContext, 1, 'Kagorithm_386_CreatingDefaultDeclaration', ' PRINT sec80D.maxLimit', IFNULL(NULLIF(JSON_UNQUOTE(JSON_EXTRACT(sec80D,'$._details.maxLimit')),'null'),''));
SET sec80D = updateHeaderPrefix(sec80D,'$','');

IF(JSON_TYPE(JSON_EXTRACT(contextDeclaration,'$._onetomany.SectionEightyD')) != 'NULL' ) THEN 
	SET contextDeclaration = JSON_SET(contextDeclaration,'$._onetomany.SectionEightyD',arrayAppendAll(JSON_EXTRACT(contextDeclaration,'$._onetomany.SectionEightyD'),IFNULL(NULLIF(JSON_EXTRACT(sec80D,'$'),'null'),JSON_OBJECT()))); 
ELSE 
	IF  JSON_TYPE(IFNULL(NULLIF(JSON_EXTRACT(sec80D,'$'),'null'),JSON_OBJECT())) != 'ARRAY' THEN 
		SET contextDeclaration = JSON_SET(contextDeclaration,'$._onetomany.SectionEightyD',JSON_ARRAY(IFNULL(NULLIF(JSON_EXTRACT(sec80D,'$'),'null'),JSON_OBJECT())));
	ELSE 
		SET contextDeclaration = JSON_SET(contextDeclaration,'$._onetomany.SectionEightyD',IFNULL(NULLIF(JSON_EXTRACT(sec80D,'$'),'null'),JSON_OBJECT())); 
	END IF;
END IF;
SET _itr9 = _itr9+1; 

END WHILE LOOP__itr9; 

CALL SYS_DEBUG_MESG2(_otherContext, 1, 'Kagorithm_386_CreatingDefaultDeclaration', 'IF', "TRUE BLOCK END OF 15. sec80Dcomp");

END IF; 

==================== IF BLOCK CODE ===================================================================================

==================== Fetch Step ================================

SET _projection = null;
SET _filters = null;
SET _filters = '';
SET _orderBy = null;
SET _orderBy = '';
SET _aliasMap = null;
SET _aliasMap = '{}';

SET _projection = ' {"_header":{"entityid":"FinancialYear_607","entitytype":"MASTER","entityname":"FinancialYear","audited":false,"mode":2,"updateui":0,"relationtype":"","prefix":"","mappedattribute":""},"_details":["masterEntityId","year","entityType","id"],"_updated":["year"],"_relations":{}} ';


{
  "_header": {
    "entityid": "FinancialYear_607",
    "entitytype": "MASTER",
    "entityname": "FinancialYear",
    "audited": false,
    "mode": 2,
    "updateui": 0,
    "relationtype": "",
    "prefix": "",
    "mappedattribute": ""
  },
  "_details": [
    "masterEntityId",
    "year",
    "entityType",
    "id"
  ],
  "_updated": [
    "year"
  ],
  "_relations": {
    
  }
}


SET _orderBy = '  order by financialyear_607_.id desc  ';
SET _limit = '  limit 1000 ';
SET _aliasMap = "{}";

CALL SYS_DEBUG_MESG2(_otherContext, 2, 'Kagorithm_386_CreatingDefaultDeclaration', 'DB_FETCH PROJECTIONS', _projection);

CALL SYS_GET_FETCH_SQL_STMT(_otherContext, _projection, @_fetch_stmt, _aliasMap);

CALL SYS_DEBUG_MESG2(_otherContext, 2, 'Kagorithm_386_CreatingDefaultDeclaration', 'DB_FETCH ALIASMAP', _aliasMap);

SET _filters = ' where (financialyear_607_.year in (:param0_) )  ' ;

SET _policyDetailsMap = null;

SET _policyDetailsMap = JSON_OBJECT('param0_',currentYear);

IF(_policyDetailsMap IS NOT NULL) THEN
SET _paramJsonKeys = JSON_KEYS(_policyDetailsMap);
SET _itr1 = 0;	
WHILE( _itr1 < JSON_LENGTH(_paramJsonKeys)) DO
SET _paramKey = JSON_UNQUOTE(JSON_EXTRACT(_paramJsonKeys, concat('$[',_itr1,']')));
SET _paramValue = JSON_EXTRACT(_policyDetailsMap,  concat('$.', _paramKey) );
IF INSTR(_paramValue,'#IN#') > 0 THEN
	SET _paramValue = REPLACE(_paramValue, '#IN#','');
	SET _paramValue = JSON_UNQUOTE(_paramValue);
END IF;
SET _filters = REPLACE(_filters, concat(':',_paramKey), _paramValue);
SET _itr1 = _itr1 + 1;
END WHILE;
END IF;
IF(_aliasMap IS NOT NULL) THEN
	SET _aliasKeys = JSON_KEYS(_aliasMap);
	SET _itr2 = 0;	
	WHILE( _itr2 < JSON_LENGTH(_aliasKeys)) DO
		SET _aliasKey = JSON_UNQUOTE (JSON_EXTRACT(_aliasKeys, concat('$[',_itr2,']')));
		SET _tempAliasKeyFinder = "%_aliasKey.%";
		SET _tempAliasKeyFinder = replace(_tempAliasKeyFinder, "_aliasKey",_aliasKey);
		SET _aliasValue = JSON_UNQUOTE(JSON_EXTRACT(_aliasMap,  concat('$.', _aliasKey) ));
				IF(_filters like _tempAliasKeyFinder) THEN
			SET _filters = REPLACE(_filters, concat(_aliasKey,'.'), concat(_aliasValue,'.' ));
       END IF;
		IF(_orderBy like _tempAliasKeyFinder) THEN
			SET _orderBy = REPLACE(_orderBy, concat(_aliasKey,'.'), concat(_aliasValue,'.' ));
       END IF;
		 		SET _itr2 = _itr2 + 1;
	END WHILE;
END IF;
SET @_fetch_stmt = replace(@_fetch_stmt, '#FILTERS#', _filters);

SET @_fetch_stmt = replace(@_fetch_stmt, '#ORDERBY#', _orderBy);

SET @_fetch_stmt = replace(@_fetch_stmt, '#LIMIT#', _limit);

CALL SYS_DEBUG_MESG2(_otherContext, 2, 'Kagorithm_386_CreatingDefaultDeclaration', 'DB_FETCH @_fetch_stmt', @_fetch_stmt);


PREPARE _stmt FROM @_fetch_stmt;                                             =========================================>  db call for fetch step 
EXECUTE _stmt;


DEALLOCATE PREPARE _stmt;

IF(@_resultSet is not null) THEN
	SET currentFY = @_resultSet;
    CALL SYS_DEBUG_MESG2(_otherContext, 2, 'Kagorithm_386_CreatingDefaultDeclaration', 'DB_FETCH @_resultSet', @_resultSet);
    SET @_resultSet = NULL;
ELSE 
	SET currentFY = JSON_ARRAY();
 	CALL SYS_DEBUG_MESG2(_otherContext, 2, 'Kagorithm_386_CreatingDefaultDeclaration', '@_resultSet is NULL', currentFY);
END IF;


==================== Fetch Step ================================



==================== Itr Step ==================================

SET _itr9 = 0; 
LOOP__itr9: WHILE(_itr9 < IF(NULLIF(JSON_UNQUOTE(JSON_EXTRACT(sec80Dcomp,'$')),'null') IS NOT NULL,JSON_LENGTH(sec80Dcomp,'$'),0)) DO 
SET itrSec80D = JSON_EXTRACT(sec80Dcomp,CONCAT('$','[',_itr9,']')); 

==================== Itr Step ==================================


==================== Create Step ==================================



SET sec80D = NULL ;

SET sec80D = ' {"_header":{"entityid":"SectionEightyD_616","entitytype":"EMBEDDED","audited":false,"mode":1,"updateui":0,"relationtype":"","prefix":"","mappedattribute":""},"_details":{"total":0,"maxLimit":0,"deductible":0,"narration":"","declaredAmt":0,"id":"#TEMP_ID"},"_updated":[],"_onetoone":{},"_onetomany":{},"_manytoone":{},"_manytomany":{}} ' ;


{
  "_header": {
    "entityid": "SectionEightyD_616",
    "entitytype": "EMBEDDED",
    "audited": false,
    "mode": 1,
    "updateui": 0,
    "relationtype": "",
    "prefix": "",
    "mappedattribute": ""
  },
  "_details": {
    "total": 0,
    "maxLimit": 0,
    "deductible": 0,
    "narration": "",
    "declaredAmt": 0,
    "id": "#TEMP_ID"
  },
  "_updated": [
    
  ],
  "_onetoone": {
    
  },
  "_onetomany": {
    
  },
  "_manytoone": {
    
  },
  "_manytomany": {
    
  }
}


SET sec80D = REPLACE(sec80D, "#TEMP_ID", CONCAT('temp_',getUIDShort()));

SET sec80D = JSON_SET(sec80D,'$._details.eightyDComponentsId',NULLIF(JSON_UNQUOTE(JSON_EXTRACT(itrSec80D,'$._details.id')),'null'));

SET sec80D = JSON_SET(sec80D,'$._manytoone.EightyDComponents._details.componentName',NULLIF(JSON_UNQUOTE(JSON_EXTRACT(itrSec80D,'$._details.componentName')),'null'));

IFNULL(NULLIF(JSON_UNQUOTE(JSON_EXTRACT(sec80D,'$._manytoone.EightyDComponents._details.componentName')),'null'),''));

SET sec80D = JSON_SET(sec80D,'$._manytoone.EightyDComponents._details.componentType',NULLIF(JSON_UNQUOTE(JSON_EXTRACT(itrSec80D,'$._details.componentType')),'null'));

SET itrSec80D = updateHeaderPrefix(itrSec80D,'$','');

SET sec80D = JSON_SET(sec80D,'$._manytoone.EightyDComponents',IFNULL(NULLIF(JSON_EXTRACT(itrSec80D,'$'),'null'),JSON_OBJECT()));

SET sec80D = JSON_SET(sec80D,'$._details.total',0.0);

SET sec80D = JSON_SET(sec80D,'$._details.maxLimit',CAST(IFNULL(NULLIF(JSON_UNQUOTE(JSON_EXTRACT(itrSec80D,'$._details.maxLimit')),'null'),0) AS DECIMAL(25,3)));

CALL SYS_DEBUG_MESG2(_otherContext, 1, 'Kagorithm_386_CreatingDefaultDeclaration', ' PRINT sec80D.maxLimit', IFNULL(NULLIF(JSON_UNQUOTE(JSON_EXTRACT(sec80D,'$._details.maxLimit')),'null'),''));
SET sec80D = updateHeaderPrefix(sec80D,'$','');

IF(JSON_TYPE(JSON_EXTRACT(contextDeclaration,'$._onetomany.SectionEightyD')) != 'NULL' ) THEN 
	SET contextDeclaration = JSON_SET(contextDeclaration,'$._onetomany.SectionEightyD',arrayAppendAll(JSON_EXTRACT(contextDeclaration,'$._onetomany.SectionEightyD'),IFNULL(NULLIF(JSON_EXTRACT(sec80D,'$'),'null'),JSON_OBJECT()))); 
ELSE 
	IF  JSON_TYPE(IFNULL(NULLIF(JSON_EXTRACT(sec80D,'$'),'null'),JSON_OBJECT())) != 'ARRAY' THEN 
		SET contextDeclaration = JSON_SET(contextDeclaration,'$._onetomany.SectionEightyD',JSON_ARRAY(IFNULL(NULLIF(JSON_EXTRACT(sec80D,'$'),'null'),JSON_OBJECT())));
	ELSE 
		SET contextDeclaration = JSON_SET(contextDeclaration,'$._onetomany.SectionEightyD',IFNULL(NULLIF(JSON_EXTRACT(sec80D,'$'),'null'),JSON_OBJECT())); 
	END IF;
END IF;

SET _itr9 = _itr9+1; 

END WHILE LOOP__itr9; 

END IF; 





==================== Create Step ==================================






================================================================= MYSQL FUNCTIONS =============================================================================

SET GLOBAL log_bin_trust_function_creators = 1;



CREATE DEFINER=`root`@`localhost` FUNCTION `deleteAllObjects`(_type VARCHAR(255)) RETURNS int
    MODIFIES SQL DATA
BEGIN
		
	CREATE TEMPORARY TABLE IF NOT EXISTS TEMP_TABLE(id VARCHAR(255), dataObject JSON, transType VARCHAR(255), con INT, PRIMARY KEY(id,transType,con));

	IF _type IS NOT NULL THEN
		DELETE FROM TEMP_TABLE WHERE  transType = _type AND con = CONNECTION_ID();
	END IF; 	
	
	RETURN 0;
END



CREATE DEFINER=`root`@`localhost` FUNCTION `deleteObject`(_type VARCHAR(255),_id VARCHAR(255)) RETURNS int
    MODIFIES SQL DATA
BEGIN
	
	CREATE TEMPORARY TABLE IF NOT EXISTS TEMP_TABLE(id VARCHAR(255), dataObject JSON, transType VARCHAR(255), con INT, PRIMARY KEY(id,transType,con));
	IF _id IS NOT NULL AND _type IS NOT NULL THEN
		DELETE FROM TEMP_TABLE WHERE id = _id AND transType = _type AND con = CONNECTION_ID();
	END IF; 	
	
	RETURN 0;

END




CREATE DEFINER=`root`@`localhost` FUNCTION  `putObject`(_type VARCHAR(255), _object JSON , _id VARCHAR(255)) RETURNS int
    MODIFIES SQL DATA
BEGIN
	
	DECLARE tempid VARCHAR(255);

	CREATE TEMPORARY TABLE IF NOT EXISTS TEMP_TABLE(id VARCHAR(255), dataObject JSON, transType VARCHAR(255), con INT, PRIMARY KEY(id,transType,con));
	
	IF _id IS NOT NULL  THEN
		SET tempid = NULL;
		SELECT id INTO tempid FROM TEMP_TABLE WHERE id = _id AND transType = _type AND con = CONNECTION_ID();
	
		IF tempid IS NULL THEN
			INSERT INTO TEMP_TABLE(id,dataObject,transType,con) VALUES(_id, _object, _type , CONNECTION_ID() ) ;
		ELSE
			UPDATE TEMP_TABLE SET dataObject = _object WHERE id = _id AND transType = _type AND con = CONNECTION_ID();
		END IF;
	END IF;            
		
	RETURN 0;
	

END





CREATE DEFINER=`root`@`localhost` FUNCTION `getYear`(inputDate datetime) RETURNS int DETERMINISTIC
BEGIN 
RETURN YEAR(inputDate);
END



CREATE DEFINER=`root`@`localhost` FUNCTION `getCurrentDate`() RETURNS varchar(255) CHARSET utf8mb4 NO SQL
BEGIN 
RETURN CAST(TIMESTAMP(CURDATE()) AS CHAR);
END




================================================================= MYSQL FUNCTIONS =============================================================================

